#Display full view of article
prototype(Sfi.News:NewsDetail) < prototype(TYPO3.Neos:Content) {
	@override.variant = ${q(node).property('variant') != 'Inherit' ? q(node).property('variant') : q(node).parent().property('variant')}
	templatePath = ${'resource://Sfi.News/Private/Templates/NewsDetail' + q(node).parent().property('variant') + '.html'}
	@override.configuration = ${Configuration.setting('Sfi.News.newsDetail')}
	configuration = ${configuration}

	title = ${q(node).property('title')}
	teaser = ${q(node).property('teaser')}
	lead = ${q(node).property('lead')}
	author = ${q(node).property('author')}
	authorPhoto = ${q(node).property('authorPhoto')}
	date = ${q(node).property('date')}
	# TODO: this is a real shit, fix it with @if someday
	coverPhotoExists = ${q(node).children('coverPhoto').get(0) ? true : false}
	coverPhoto = TYPO3.Neos.NodeTypes:Image{
		@override.node = ${q(node).children('coverPhoto').get(0) ? q(node).children('coverPhoto').get(0) : null}
		maximumWidth = 980
		maximumHeight = 490
		allowCropping = TRUE
	}
	coverCollection = TYPO3.Neos:ContentCollection{
		nodePath = 'coverCollection'
		prototype(TYPO3.Neos.NodeTypes:Image){
			maximumWidth = 980
			maximumHeight = 490
			allowCropping = TRUE
		}
	}
	gallery = Sfi.Widgets:Carousel{
		content.collection = ${q(node).children('gallery').children()}
		attributes.class = 'Carousel js-carousel-2x'
	}

	main = TYPO3.Neos:ContentCollection{
		nodePath = 'main'
	}
	assets = TYPO3.Neos:ContentCollection{
		nodePath = 'assets'
	}

	category = ${q(node).parent().get(0)}

	#####
	@override.parentNodeName = ${q(node).property('_name')}
	moreNews = Sfi.News:NewsRelated{
		# Filter out the parent article
		newsCollection = ${q(site).find('[instanceof Sfi.News:News]').filter('[_name != ' + parentNodeName + ']').get()}
	}


	@cache {
		mode = 'cached'
		maximumLifetime = '86400'
		entryIdentifier {
			node = ${node}
			editPreviewMode = ${editPreviewMode}
			format = ${request.format}
		}
		entryTags {
			# Whenever the node changes the matched condition could change
			1 = ${'Node_' + documentNode.identifier}
			# Whenever one of the parent nodes changes the layout could change
			2 = ${'DescendantOf_' + documentNode.identifier}
		}
	}
}

#Breif rendering of article, used in NewsList
prototype(Sfi.News:NewsShort) < prototype(TYPO3.Neos:Content) {
	templatePath = 'resource://Sfi.News/Private/Templates/NewsShort.html'
	@override.configuration = ${Configuration.setting('Sfi.News.newsShort')}
	configuration = ${configuration}

	title = ${String.stripTags(q(node).property('title'))}
	date = ${q(node).property('date')}
	teaser = ${String.stripTags(q(node).property('teaser'))}
	# first image found becomes the thumbnail image TODO: remove legacy support for coverPhoto
	thumbnailImage = ${q(node).children('coverCollection').children().count() > 0 ? q(node).children('coverCollection').children().get(0) : q(node).children('coverPhoto').get(0)}
	#parrent node is the category
	category = ${q(node).parent().get(0)}
}


# Abstract List object
prototype(Sfi.News:AbstractList) < prototype(TYPO3.Neos:Content) {
	@override.filterByTag = ${request.arguments.tag}
	newsCollection = ${q(site).find('[instanceof Sfi.News:AbstractNews]').get()}
	# sort
	newsCollection.@process.sort = ${q(value).count() > 0 ? q(value).sort(configuration.sortProperty, 'DESC').get() : value}
	# limit
	newsCollection.@process.slice = ${q(value).count() > 0 ? q(value).slice(0, String.toInteger(configuration.numberOfItems)).get() : value}
	# filterByTag
	newsCollection.@process.filterByTag = ${filterByTag != null ? q(value).filter('[tags *= ' + filterByTag + ']').get() : value}
	itemRenderer = Sfi.News:NewsShort

	listTitle = ${configuration.listTitle}
	attributes.class = ${configuration.class}

	@cache {
		mode = 'cached'
		maximumLifetime = '86400'
		entryIdentifier {
			node = ${node}
			editPreviewMode = ${editPreviewMode}
			format = ${request.format}
			# TODO: find out why this doesn't work
			pagination = ${request.pluginArguments.news.currentPage}
		}
		entryTags {
			# Whenever the node changes the matched condition could change
			1 = ${'Node_' + documentNode.identifier}
			# Whenever one of the parent nodes changes the layout could change
			2 = ${'DescendantOf_' + documentNode.identifier}
		}
	}
}

# Show latest news
prototype(Sfi.News:NewsLatest) < prototype(Sfi.News:AbstractList) {
	templatePath = 'resource://Sfi.News/Private/Templates/List.html'
	@override.configuration = ${Configuration.setting('Sfi.News.newsLatest')}
	configuration = ${configuration}

	newsCollection = ${q(site).children('news').find('[instanceof Sfi.News:News]').filter('[important != TRUE]').get()}
	itemRenderer = Sfi.News:NewsShort
}

# List all articles, defined be category, paginated
prototype(Sfi.News:List) < prototype(Sfi.News:AbstractList) {
	templatePath = 'resource://Sfi.News/Private/Templates/List.html'
	@override.configuration = ${Configuration.setting('Sfi.News.newsList')}
	configuration = ${configuration}
	newsCollection = ${q(site).find('[instanceof Sfi.News:News]').get()}
	itemRenderer = Sfi.News:NewsShort
	@cache {
		mode = 'uncached'
			context {
				1 = 'node'
				2 = 'documentNode'
				3 = 'site'
			}
		}
	}

prototype(Sfi.News:NewsRelated) < prototype(Sfi.News:AbstractList) {
	templatePath = 'resource://Sfi.News/Private/Templates/List.html'
	@override.configuration = ${Configuration.setting('Sfi.News.newsRelated')}
	configuration = ${configuration}

	newsCollection = ${q(site).find('[instanceof Sfi.News:AbstractNews]').get()}
	itemRenderer = Sfi.News:NewsShort
}



prototype(Sfi.News:TopShort) < prototype(Sfi.News:NewsShort) {
	templatePath = 'resource://Sfi.News/Private/Templates/TopShort.html'
	@override.configuration = ${Configuration.setting('Sfi.News.topShort')}
	configuration = ${configuration}
}

prototype(Sfi.News:TopList) < prototype(Sfi.News:AbstractList) {
	templatePath = 'resource://Sfi.News/Private/Templates/List.html'
	@override.configuration = ${Configuration.setting('Sfi.News.topList')}
	configuration = ${configuration}

	newsCollection = ${q(site).find('[instanceof Sfi.News:AbstractNews]').filter('[important = TRUE]').get()}
	itemRenderer = Sfi.News:TopShort
}