#Display full view of article
prototype(Sfi.News:NewsDetail) < prototype(TYPO3.Neos:Content) {
	@override.variant = ${q(node).property('variant') != 'Inherit' ? q(node).property('variant') : q(node).parent().property('variant')}
	templatePath = ${'resource://Sfi.News/Private/Templates/NewsDetail' + q(node).parent().property('variant') + '.html'}
	partialRootPath = 'resource://Sfi.Sfi/Private/Partials'
	@override.configuration = ${Configuration.setting('Sfi.News.newsDetail')}

	title = ${q(node).property('title')}
	teaser = ${q(node).property('teaser')}
	lead = ${q(node).property('lead')}
	author = ${String.stripTags(q(node).property('author'))}
	authorPhoto = ${String.stripTags(q(node).property('authorPhoto'))}
	date = ${q(node).property('date')}

	coverCollection = TYPO3.Neos:ContentCollection{
		nodePath = 'coverCollection'
		prototype(TYPO3.Neos.NodeTypes:Image){
			maximumWidth = 980
			maximumHeight = 653
			allowCropping = TRUE
		}
		@if.notVideoOrBackend = ${(q(node).property('hasVideo') != true) || (node.context.workspace.name != 'live')}
	}
	gallery = Sfi.Shared:Carousel{
		content.collection = ${q(node).children('gallery').children()}
		attributes.class = 'Carousel js-carousel-2x'
		@if.hassGallery = ${q(node).children('gallery').children().count() > 0}
	}

	main = TYPO3.Neos:ContentCollection{
		nodePath = 'main'
	}
	assets = TYPO3.Neos:ContentCollection{
		nodePath = 'assets'
	}

	category = ${q(node).parent().get(0)}

	#####
	moreItems = Sfi.News:NewsRelated{
		newsCollection = ${q(site).find('[instanceof Sfi.News:News]').get()}
	}


	@cache {
		mode = 'cached'
		maximumLifetime = '86400'
		entryIdentifier {
			node = ${node}
			editPreviewMode = ${editPreviewMode}
			format = ${request.format}
		}
		entryTags {
			# Whenever the node changes the matched condition could change
			1 = ${'Node_' + documentNode.identifier}
			# Whenever one of the parent nodes changes the layout could change
			2 = ${'DescendantOf_' + documentNode.identifier}
		}
	}
}

#Breif rendering of article, used in NewsList
prototype(Sfi.News:NewsShort) < prototype(TYPO3.Neos:Content) {
	templatePath = 'resource://Sfi.News/Private/Templates/NewsShort.html'
	@override.configuration = ${Configuration.setting('Sfi.News.newsShort')}

	title = ${String.stripTags(q(node).property('title'))}
	date = ${q(node).property('date')}
	teaser = ${String.stripTags(q(node).property('teaser'))}
	# first image found becomes the thumbnail image TODO: remove legacy support for coverPhoto
	thumbnailImage = ${q(node).children('coverCollection').children().count() > 0 ? q(node).children('coverCollection').children().get(0) : null}
	#parrent node is the category
	category = ${q(node).parent().get(0)}
}

prototype(Sfi.News:Listable) < prototype(TYPO3.Neos:Content) {
	templatePath = 'resource://Sfi.News/Private/Templates/Listable.html'
	sortProperty = 'to-be-set'
	numberOfItems = 10

	collection = ${q(site).find('[instanceof Sfi.News:AbstractArticle]').get()}
	collection.@process.sort = ${q(value).count() > 0 ? q(value).sort(this.sortProperty, 'DESC').get() : value}
	collection.@process.slice = ${q(value).count() > 0 ? q(value).slice(0, String.toInteger(this.numberOfItems)).get() : value}

	itemRenderer = TYPO3.TypoScript:Case {
		default {
			@position = 'end'
			condition = TRUE
			type = 'Sfi.News:NewsShort'
		}
	}

	@cache {
		mode = 'cached'
		maximumLifetime = '86400'
		entryIdentifier {
			node = ${node}
			editPreviewMode = ${editPreviewMode}
			format = ${request.format}
		}
		entryTags {
			# Whenever the node changes the matched condition could change
			1 = ${'Node_' + documentNode.identifier}
			# Whenever one of the parent nodes changes the layout could change
			2 = ${'DescendantOf_' + documentNode.identifier}
		}
	}
}

# Abstract List object
prototype(Sfi.News:AbstractList) < prototype(TYPO3.TypoScript:Tag) {
	attributes.class = ${configuration.wrapClass}
	content = TYPO3.TypoScript:Array {
		listTitleTag = TYPO3.TypoScript:Tag {
			tagName = h2
			attributes.class = ${configuration.listTitleClass}
			content = ${configuration.listTitle}
			@if.isSet = ${configuration.listTitle != ''}
		}
		list = Sfi.News:Listable {
			sortProperty = ${configuration.sortProperty}
			numberOfItems = ${configuration.numberOfItems}
			attributes = TYPO3.TypoScript:Attributes {
				class = ${configuration.class}
			}
		}
		archiveLink = TYPO3.TypoScript:Tag {
			tagName = 'a'
			attributes.class = 'ButtonInline News-MoreButton right'
			attributes.href = TYPO3.Neos:NodeUri {
				node = ${configuration.archiveLink}
			}
			content = ${configuration.archiveLinkTitle}
			@if.isSet = ${configuration.archiveLink != ''}
		}
	}
}


# Show latest news
prototype(Sfi.News:Latest) < prototype(Sfi.News:AbstractList) {
	@override.configuration = ${Configuration.setting('Sfi.News.newsLatest')}

	prototype(Sfi.News:Listable) {
		collection = ${q(site).find('[instanceof Sfi.News:AbstractNews]').get()}
		attributes.data-columns = true
	}
}

# List all articles, defined be category, paginated
prototype(Sfi.News:List) < prototype(Sfi.News:AbstractList) {
	@override.configuration = ${Configuration.setting('Sfi.News.newsList')}

	prototype(Sfi.News:Listable) {
		collection = ${q(node).find('[instanceof Sfi.News:AbstractArticle]').get()}
		attributes.data-columns = true
	}
	# TODO: find out why this doesn't work
	# pagination = ${request.pluginArguments.news.currentPage}
	@cache {
		mode = 'uncached'
		context {
			1 = 'node'
			2 = 'documentNode'
			3 = 'site'
		}
	}
}

prototype(Sfi.News:NewsRelated) < prototype(Sfi.News:AbstractList) {
	templatePath = 'resource://Sfi.News/Private/Templates/List.html'
	@override.configuration = ${Configuration.setting('Sfi.News.newsRelated')}

	prototype(Sfi.News:Listable) {
		collection.@process.filterOutSelf {
			expression = ${q(value).filter('[_name != ' + q(node).property('_name') + ']').get()}
			@position = 'start'
		}
		itemRenderer = Sfi.News:NewsShort
	}
	prototype(Sfi.News:NewsShort) {
		@override.configuration = ${Configuration.setting('Sfi.News.newsRelated')}
		templatePath = 'resource://Sfi.News/Private/Templates/NewsShortSmall.html'
	}
}



prototype(Sfi.News:TopShort) < prototype(Sfi.News:NewsShort) {
	templatePath = 'resource://Sfi.News/Private/Templates/TopShort.html'
	@override.configuration = ${Configuration.setting('Sfi.News.topShort')}
}

prototype(Sfi.News:TopList) < prototype(Sfi.News:AbstractList) {
	templatePath = 'resource://Sfi.News/Private/Templates/List.html'
	@override.configuration = ${Configuration.setting('Sfi.News.topList')}

	prototype(Sfi.News:Listable) {
		collection = ${q(site).find('[instanceof Sfi.News:ImportantMixin]').filter('[important = TRUE]').get()}
		collection.@process.sort = ${q(value).count() > 0 ? q(value).sort('importantSort', 'ASC').get() : value}
		itemRenderer = Sfi.News:TopShort
	}
}



prototype(Sfi.News:CategorizedList) < prototype(TYPO3.TypoScript:Tag) {
	content = TYPO3.TypoScript:Collection {
		collection = ${q(documentNode).find('[instanceof Sfi.News:Category]').get()}
		itemRenderer = Sfi.News:List
		itemName = 'node'
		iterationName = 'iterator'
	}
	prototype(Sfi.News:List) {
		@override.configuration = ${Configuration.setting('Sfi.News.articlesList')}
		content.listTitleTag.content = ${node.properties.title}
		content.listTitleTag.@if.isSet = ${true}
	}

	@cache {
		mode = 'cached'
		maximumLifetime = '86400'
		entryIdentifier {
			node = ${node}
			editPreviewMode = ${editPreviewMode}
			format = ${request.format}
		}
		entryTags {
			# Whenever the node changes the matched condition could change
			1 = ${'Node_' + documentNode.identifier}
			# Whenever one of the parent nodes changes the layout could change
			2 = ${'DescendantOf_' + documentNode.identifier}
		}
	}
}


prototype(Sfi.News:ListByTag) < prototype(Sfi.News:AbstractList) {
	@override.configuration = ${Configuration.setting('Sfi.News.newsList')}

	prototype(Sfi.News:Listable) {
		collection = ${q(site).find('[instanceof Sfi.News:AbstractNews]').get()}
		collection.@process.filterByReference = ${q(node).property('tag') ? q(value).filterByReference('tags', q(node).property('tag')).get() : q(value).filterByReference('tags', documentNode).get()}
		attributes.data-columns = true
	}
}
